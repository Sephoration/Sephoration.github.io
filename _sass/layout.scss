// The basic two column layout

.side-bar {
  z-index: 0;
  display: flex;
  flex-wrap: wrap;
  background-color: $sidebar-color;

  @include mq(md) {
    flex-flow: column nowrap;
    position: fixed;
    width: $nav-width-md;
    height: 100%;
    border-right: $border $border-color;
    align-items: flex-end;
  }

  @include mq(lg) {
    width: calc((100% - #{$nav-width + $content-width}) / 2 + #{$nav-width});
    min-width: $nav-width;
  }

  @include mq(xl) {
    width: calc((100% - #{$nav-width + $toc-width + $content-width}) / 2 + #{$nav-width});
  }

  & ~ .main {
    @include mq(md) {
      margin-left: $nav-width-md;
    }

    @include mq(lg) {
      // stylelint-disable function-name-case
      // disable for Max(), we want to use the CSS max() function
      margin-left: Max(
        #{$nav-width},
        calc((100% - #{$nav-width + $content-width}) / 2 + #{$nav-width})
      );
      // stylelint-enable function-name-case
    }

    @include mq(xl) {
      margin-left: calc(-#{$toc-width} + (100% - #{$nav-width + $toc-width + $content-width}) / 2 + #{$nav-width});

      @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
        margin-left: calc((100% - #{$nav-width + $toc-width + $content-width}) / 2 + #{$nav-width});
      }
    }

    .main-header {
      display: none;
      background-color: $sidebar-color;

      @include mq(md) {
        display: flex;
        background-color: $body-background-color;
      }

      &.nav-open {
        display: block;

        @include mq(md) {
          display: flex;
        }
      }
    }
  }
}

.main {
  margin: auto;

  @include mq(md) {
    display: inline-block;
    position: relative;
    max-width: $content-width;
  }
}

.main-content-wrap {
  padding-top: $gutter-spacing-sm;
  padding-bottom: $gutter-spacing-sm;

  @include container;

  @include mq(md) {
    padding-top: $gutter-spacing;
    padding-bottom: $gutter-spacing;
  }
}

.main-header {
  z-index: 0;
  border-bottom: $border $border-color;

  @include mq(md) {
    display: flex;
    justify-content: space-between;
    height: $header-height;
  }
}

.site-nav,
.site-header,
.site-footer {
  width: 100%;

  @include mq(lg) {
    width: $nav-width;
  }
}

.site-nav {
  display: none;

  &.nav-open {
    display: block;
  }

  @include mq(md) {
    display: block;
    padding-top: $sp-8;
    padding-bottom: $gutter-spacing-sm;
    overflow-y: auto;
    flex: 1 1 auto;
  }
}

.site-header {
  display: flex;
  min-height: $header-height;
  align-items: center;

  @include mq(md) {
    height: $header-height;
    max-height: $header-height;
    border-bottom: $border $border-color;
  }
}

.site-title {
  flex-grow: 1;
  display: flex;
  height: 100%;
  align-items: center;
  padding-top: $sp-3;
  padding-bottom: $sp-3;
  color: $body-heading-color;

  @include container;

  @include fs-6;

  @include mq(md) {
    padding-top: $sp-2;
    padding-bottom: $sp-2;
  }
}

@if variable-exists(logo) {
  .site-logo {
    width: 100%;
    height: 100%;
    background-image: url($logo);
    background-repeat: no-repeat;
    background-position: left center;
    background-size: contain;
  }
}

.site-button {
  display: flex;
  height: 100%;
  padding: $gutter-spacing-sm;
  align-items: center;
}

@include mq(md) {
  .site-header .site-button {
    display: none;
  }
}

.site-title:hover {
  background-image: linear-gradient(
    -90deg,
    rgba($feedback-color, 1) 0%,
    rgba($feedback-color, 0.8) 80%,
    rgba($feedback-color, 0) 100%
  );
}

.site-button:hover {
  background-image: linear-gradient(
    -90deg,
    rgba($feedback-color, 1) 0%,
    rgba($feedback-color, 0.8) 100%
  );
}

// stylelint-disable selector-max-type

body {
  position: relative;
  padding-bottom: $sp-10;
  overflow-y: scroll;

  @include mq(md) {
    position: static;
    padding-bottom: 0;
  }
}

// stylelint-enable selector-max-type

.site-footer {
  position: absolute;
  bottom: 0;
  left: 0;
  padding-top: $sp-4;
  padding-bottom: $sp-4;
  color: $grey-dk-000;

  @include container;

  @include fs-2;

  @include mq(md) {
    position: static;
    justify-self: end;
  }
}

.icon {
  width: $sp-5;
  height: $sp-5;
  color: $link-color;
}

/* float: left works fine on Chromium-based browsers, but there's a bug from Firefox 59 where opening and
closing DevTools will cause the main content to be pushed down as if ToC is a block (abandoned to this day!).
ref: Bug 1448995
As a temporary fix, set both the main content and ToC to be inline with each other, adjust .main's
margin-left to accompany the ToC that goes before it */
nav.toc {
  display: none;
  visibility: hidden;
  padding: $sp-4;
  line-height: 1.5;
  overflow-y: auto;

  @include fs-4;

  @include mq(md) {
    display: block;
    visibility: visible;
    position: fixed;
    right: 0;
    z-index: 1;
    width: #{$toc-width + $sp-6};
    height: 100vh;
    background-color: $white;
    box-shadow: 0 0 10px $grey-dk-300;

    @include fs-3;
  }

  @include mq(xl) {
    display: inline-block;
    visibility: visible;
    position: sticky;
    top: $sp-4;
    left: calc((100% - #{$nav-width + $toc-width + $content-width}) / 2 + #{$nav-width + $content-width} + $sp-4);
    vertical-align: top;
    margin-top: #{$header-height + $sp-8};
    width: $toc-width;
    max-height: calc(100vh - #{$sp-4} * 2);
    padding: initial;
    height: initial;
    background-color: initial;
    box-shadow: initial;

    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
      position: fixed;
      max-height: calc(100vh - #{$header-height + $sp-10});
    }
  }

  & > h2 {
    margin-top: $sp-4;
  }

  // Because toc-width is usually small => hide the list bullet points and minimize left padding
  & ul {
    padding-left: $sp-4;
    list-style-type: none;
  }

  & > ul {
    padding-left: 0;
  }

  & ol {
    padding-left: $sp-5;
    list-style-type: none;
    counter-reset: step-counter;

    & > li::before {
      position: absolute;
      margin-left: -#{$sp-5};
      content: counter(step-counter);
      counter-increment: step-counter;
    }

    & > li ol {
      counter-reset: sub-counter;
    }

    & > li ol > li::before {
      content: counter(sub-counter, lower-alpha);
      counter-increment: sub-counter;
    }
  }

  & li {
    margin: $sp-2 0;
  }
}
